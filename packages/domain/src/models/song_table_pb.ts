// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file song_table.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Song_MetadataTag } from "./song_pb.js";

/**
 * @generated from message SongTableColumn
 */
export class SongTableColumn extends Message<SongTableColumn> {
  /**
   * @generated from field: Song.MetadataTag tag = 1;
   */
  tag = Song_MetadataTag.UNKNOWN;

  /**
   * @generated from field: optional int32 sort_order = 2;
   */
  sortOrder?: number;

  /**
   * @generated from field: bool is_sort_desc = 3;
   */
  isSortDesc = false;

  /**
   * @generated from field: int32 width_flex = 4;
   */
  widthFlex = 0;

  constructor(data?: PartialMessage<SongTableColumn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SongTableColumn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tag", kind: "enum", T: proto3.getEnumType(Song_MetadataTag) },
    { no: 2, name: "sort_order", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "is_sort_desc", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "width_flex", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SongTableColumn {
    return new SongTableColumn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SongTableColumn {
    return new SongTableColumn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SongTableColumn {
    return new SongTableColumn().fromJsonString(jsonString, options);
  }

  static equals(a: SongTableColumn | PlainMessage<SongTableColumn> | undefined, b: SongTableColumn | PlainMessage<SongTableColumn> | undefined): boolean {
    return proto3.util.equals(SongTableColumn, a, b);
  }
}

/**
 * @generated from message CommonSongTableState
 */
export class CommonSongTableState extends Message<CommonSongTableState> {
  /**
   * @generated from field: repeated SongTableColumn columns = 1;
   */
  columns: SongTableColumn[] = [];

  constructor(data?: PartialMessage<CommonSongTableState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "CommonSongTableState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "columns", kind: "message", T: SongTableColumn, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommonSongTableState {
    return new CommonSongTableState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommonSongTableState {
    return new CommonSongTableState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommonSongTableState {
    return new CommonSongTableState().fromJsonString(jsonString, options);
  }

  static equals(a: CommonSongTableState | PlainMessage<CommonSongTableState> | undefined, b: CommonSongTableState | PlainMessage<CommonSongTableState> | undefined): boolean {
    return proto3.util.equals(CommonSongTableState, a, b);
  }
}

