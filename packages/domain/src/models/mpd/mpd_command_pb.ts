// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file mpd/mpd_command.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { MpdPlayerStatus, MpdPlayerVolume } from "./mpd_player_pb.js";
import { Song, Song_MetadataTag } from "../song_pb.js";
import { MpdStats } from "./mpd_stats_pb.js";
import { Playlist } from "../playlist_pb.js";
import { FilterCondition } from "../filter_pb.js";
import { MpdOutputDevice } from "./mpd_output_pb.js";
import { Folder } from "../file_explore_pb.js";
import { MpdProfile } from "./mpd_profile_pb.js";

/**
 * @generated from message MpdCommand
 */
export class MpdCommand extends Message<MpdCommand> {
  constructor(data?: PartialMessage<MpdCommand>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand {
    return new MpdCommand().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand {
    return new MpdCommand().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand {
    return new MpdCommand().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand | PlainMessage<MpdCommand> | undefined, b: MpdCommand | PlainMessage<MpdCommand> | undefined): boolean {
    return proto3.util.equals(MpdCommand, a, b);
  }
}

/**
 * @generated from message MpdCommand.Connection
 */
export class MpdCommand_Connection extends Message<MpdCommand_Connection> {
  constructor(data?: PartialMessage<MpdCommand_Connection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Connection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Connection {
    return new MpdCommand_Connection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Connection {
    return new MpdCommand_Connection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Connection {
    return new MpdCommand_Connection().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Connection | PlainMessage<MpdCommand_Connection> | undefined, b: MpdCommand_Connection | PlainMessage<MpdCommand_Connection> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Connection, a, b);
  }
}

/**
 * @generated from message MpdCommand.Connection.PingRequest
 */
export class MpdCommand_Connection_PingRequest extends Message<MpdCommand_Connection_PingRequest> {
  constructor(data?: PartialMessage<MpdCommand_Connection_PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Connection.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Connection_PingRequest {
    return new MpdCommand_Connection_PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Connection_PingRequest {
    return new MpdCommand_Connection_PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Connection_PingRequest {
    return new MpdCommand_Connection_PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Connection_PingRequest | PlainMessage<MpdCommand_Connection_PingRequest> | undefined, b: MpdCommand_Connection_PingRequest | PlainMessage<MpdCommand_Connection_PingRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Connection_PingRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Connection.PingResponse
 */
export class MpdCommand_Connection_PingResponse extends Message<MpdCommand_Connection_PingResponse> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  constructor(data?: PartialMessage<MpdCommand_Connection_PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Connection.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Connection_PingResponse {
    return new MpdCommand_Connection_PingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Connection_PingResponse {
    return new MpdCommand_Connection_PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Connection_PingResponse {
    return new MpdCommand_Connection_PingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Connection_PingResponse | PlainMessage<MpdCommand_Connection_PingResponse> | undefined, b: MpdCommand_Connection_PingResponse | PlainMessage<MpdCommand_Connection_PingResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Connection_PingResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Control
 */
export class MpdCommand_Control extends Message<MpdCommand_Control> {
  constructor(data?: PartialMessage<MpdCommand_Control>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Control";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Control {
    return new MpdCommand_Control().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Control {
    return new MpdCommand_Control().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Control {
    return new MpdCommand_Control().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Control | PlainMessage<MpdCommand_Control> | undefined, b: MpdCommand_Control | PlainMessage<MpdCommand_Control> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Control, a, b);
  }
}

/**
 * @generated from message MpdCommand.Control.NextRequest
 */
export class MpdCommand_Control_NextRequest extends Message<MpdCommand_Control_NextRequest> {
  constructor(data?: PartialMessage<MpdCommand_Control_NextRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Control.NextRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Control_NextRequest {
    return new MpdCommand_Control_NextRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Control_NextRequest {
    return new MpdCommand_Control_NextRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Control_NextRequest {
    return new MpdCommand_Control_NextRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Control_NextRequest | PlainMessage<MpdCommand_Control_NextRequest> | undefined, b: MpdCommand_Control_NextRequest | PlainMessage<MpdCommand_Control_NextRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Control_NextRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Control.NextResponse
 */
export class MpdCommand_Control_NextResponse extends Message<MpdCommand_Control_NextResponse> {
  constructor(data?: PartialMessage<MpdCommand_Control_NextResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Control.NextResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Control_NextResponse {
    return new MpdCommand_Control_NextResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Control_NextResponse {
    return new MpdCommand_Control_NextResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Control_NextResponse {
    return new MpdCommand_Control_NextResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Control_NextResponse | PlainMessage<MpdCommand_Control_NextResponse> | undefined, b: MpdCommand_Control_NextResponse | PlainMessage<MpdCommand_Control_NextResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Control_NextResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Control.PauseRequest
 */
export class MpdCommand_Control_PauseRequest extends Message<MpdCommand_Control_PauseRequest> {
  /**
   * @generated from field: bool pause = 1;
   */
  pause = false;

  constructor(data?: PartialMessage<MpdCommand_Control_PauseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Control.PauseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pause", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Control_PauseRequest {
    return new MpdCommand_Control_PauseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Control_PauseRequest {
    return new MpdCommand_Control_PauseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Control_PauseRequest {
    return new MpdCommand_Control_PauseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Control_PauseRequest | PlainMessage<MpdCommand_Control_PauseRequest> | undefined, b: MpdCommand_Control_PauseRequest | PlainMessage<MpdCommand_Control_PauseRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Control_PauseRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Control.PauseResponse
 */
export class MpdCommand_Control_PauseResponse extends Message<MpdCommand_Control_PauseResponse> {
  constructor(data?: PartialMessage<MpdCommand_Control_PauseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Control.PauseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Control_PauseResponse {
    return new MpdCommand_Control_PauseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Control_PauseResponse {
    return new MpdCommand_Control_PauseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Control_PauseResponse {
    return new MpdCommand_Control_PauseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Control_PauseResponse | PlainMessage<MpdCommand_Control_PauseResponse> | undefined, b: MpdCommand_Control_PauseResponse | PlainMessage<MpdCommand_Control_PauseResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Control_PauseResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Control.PlayRequest
 */
export class MpdCommand_Control_PlayRequest extends Message<MpdCommand_Control_PlayRequest> {
  /**
   * @generated from oneof MpdCommand.Control.PlayRequest.target
   */
  target: {
    /**
     * @generated from field: string pos = 1;
     */
    value: string;
    case: "pos";
  } | {
    /**
     * @generated from field: string id = 2;
     */
    value: string;
    case: "id";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MpdCommand_Control_PlayRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Control.PlayRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "target" },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "target" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Control_PlayRequest {
    return new MpdCommand_Control_PlayRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Control_PlayRequest {
    return new MpdCommand_Control_PlayRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Control_PlayRequest {
    return new MpdCommand_Control_PlayRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Control_PlayRequest | PlainMessage<MpdCommand_Control_PlayRequest> | undefined, b: MpdCommand_Control_PlayRequest | PlainMessage<MpdCommand_Control_PlayRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Control_PlayRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Control.PlayResponse
 */
export class MpdCommand_Control_PlayResponse extends Message<MpdCommand_Control_PlayResponse> {
  constructor(data?: PartialMessage<MpdCommand_Control_PlayResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Control.PlayResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Control_PlayResponse {
    return new MpdCommand_Control_PlayResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Control_PlayResponse {
    return new MpdCommand_Control_PlayResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Control_PlayResponse {
    return new MpdCommand_Control_PlayResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Control_PlayResponse | PlainMessage<MpdCommand_Control_PlayResponse> | undefined, b: MpdCommand_Control_PlayResponse | PlainMessage<MpdCommand_Control_PlayResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Control_PlayResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Control.PreviousRequest
 */
export class MpdCommand_Control_PreviousRequest extends Message<MpdCommand_Control_PreviousRequest> {
  constructor(data?: PartialMessage<MpdCommand_Control_PreviousRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Control.PreviousRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Control_PreviousRequest {
    return new MpdCommand_Control_PreviousRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Control_PreviousRequest {
    return new MpdCommand_Control_PreviousRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Control_PreviousRequest {
    return new MpdCommand_Control_PreviousRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Control_PreviousRequest | PlainMessage<MpdCommand_Control_PreviousRequest> | undefined, b: MpdCommand_Control_PreviousRequest | PlainMessage<MpdCommand_Control_PreviousRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Control_PreviousRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Control.PreviousResponse
 */
export class MpdCommand_Control_PreviousResponse extends Message<MpdCommand_Control_PreviousResponse> {
  constructor(data?: PartialMessage<MpdCommand_Control_PreviousResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Control.PreviousResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Control_PreviousResponse {
    return new MpdCommand_Control_PreviousResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Control_PreviousResponse {
    return new MpdCommand_Control_PreviousResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Control_PreviousResponse {
    return new MpdCommand_Control_PreviousResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Control_PreviousResponse | PlainMessage<MpdCommand_Control_PreviousResponse> | undefined, b: MpdCommand_Control_PreviousResponse | PlainMessage<MpdCommand_Control_PreviousResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Control_PreviousResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Control.SeekRequest
 */
export class MpdCommand_Control_SeekRequest extends Message<MpdCommand_Control_SeekRequest> {
  /**
   * @generated from field: float time = 1;
   */
  time = 0;

  /**
   * @generated from oneof MpdCommand.Control.SeekRequest.target
   */
  target: {
    /**
     * @generated from field: string pos = 2;
     */
    value: string;
    case: "pos";
  } | {
    /**
     * @generated from field: string id = 3;
     */
    value: string;
    case: "id";
  } | {
    /**
     * @generated from field: bool current = 4;
     */
    value: boolean;
    case: "current";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MpdCommand_Control_SeekRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Control.SeekRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "pos", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "target" },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "target" },
    { no: 4, name: "current", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "target" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Control_SeekRequest {
    return new MpdCommand_Control_SeekRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Control_SeekRequest {
    return new MpdCommand_Control_SeekRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Control_SeekRequest {
    return new MpdCommand_Control_SeekRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Control_SeekRequest | PlainMessage<MpdCommand_Control_SeekRequest> | undefined, b: MpdCommand_Control_SeekRequest | PlainMessage<MpdCommand_Control_SeekRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Control_SeekRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Control.SeekResponse
 */
export class MpdCommand_Control_SeekResponse extends Message<MpdCommand_Control_SeekResponse> {
  constructor(data?: PartialMessage<MpdCommand_Control_SeekResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Control.SeekResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Control_SeekResponse {
    return new MpdCommand_Control_SeekResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Control_SeekResponse {
    return new MpdCommand_Control_SeekResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Control_SeekResponse {
    return new MpdCommand_Control_SeekResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Control_SeekResponse | PlainMessage<MpdCommand_Control_SeekResponse> | undefined, b: MpdCommand_Control_SeekResponse | PlainMessage<MpdCommand_Control_SeekResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Control_SeekResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Control.StopRequest
 */
export class MpdCommand_Control_StopRequest extends Message<MpdCommand_Control_StopRequest> {
  constructor(data?: PartialMessage<MpdCommand_Control_StopRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Control.StopRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Control_StopRequest {
    return new MpdCommand_Control_StopRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Control_StopRequest {
    return new MpdCommand_Control_StopRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Control_StopRequest {
    return new MpdCommand_Control_StopRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Control_StopRequest | PlainMessage<MpdCommand_Control_StopRequest> | undefined, b: MpdCommand_Control_StopRequest | PlainMessage<MpdCommand_Control_StopRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Control_StopRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Control.StopResponse
 */
export class MpdCommand_Control_StopResponse extends Message<MpdCommand_Control_StopResponse> {
  constructor(data?: PartialMessage<MpdCommand_Control_StopResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Control.StopResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Control_StopResponse {
    return new MpdCommand_Control_StopResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Control_StopResponse {
    return new MpdCommand_Control_StopResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Control_StopResponse {
    return new MpdCommand_Control_StopResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Control_StopResponse | PlainMessage<MpdCommand_Control_StopResponse> | undefined, b: MpdCommand_Control_StopResponse | PlainMessage<MpdCommand_Control_StopResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Control_StopResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Playback
 */
export class MpdCommand_Playback extends Message<MpdCommand_Playback> {
  constructor(data?: PartialMessage<MpdCommand_Playback>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Playback";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Playback {
    return new MpdCommand_Playback().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Playback {
    return new MpdCommand_Playback().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Playback {
    return new MpdCommand_Playback().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Playback | PlainMessage<MpdCommand_Playback> | undefined, b: MpdCommand_Playback | PlainMessage<MpdCommand_Playback> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Playback, a, b);
  }
}

/**
 * @generated from message MpdCommand.Playback.ConsumeRequest
 */
export class MpdCommand_Playback_ConsumeRequest extends Message<MpdCommand_Playback_ConsumeRequest> {
  /**
   * @generated from field: bool enable = 1;
   */
  enable = false;

  constructor(data?: PartialMessage<MpdCommand_Playback_ConsumeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Playback.ConsumeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Playback_ConsumeRequest {
    return new MpdCommand_Playback_ConsumeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Playback_ConsumeRequest {
    return new MpdCommand_Playback_ConsumeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Playback_ConsumeRequest {
    return new MpdCommand_Playback_ConsumeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Playback_ConsumeRequest | PlainMessage<MpdCommand_Playback_ConsumeRequest> | undefined, b: MpdCommand_Playback_ConsumeRequest | PlainMessage<MpdCommand_Playback_ConsumeRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Playback_ConsumeRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Playback.ConsumeResponse
 */
export class MpdCommand_Playback_ConsumeResponse extends Message<MpdCommand_Playback_ConsumeResponse> {
  constructor(data?: PartialMessage<MpdCommand_Playback_ConsumeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Playback.ConsumeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Playback_ConsumeResponse {
    return new MpdCommand_Playback_ConsumeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Playback_ConsumeResponse {
    return new MpdCommand_Playback_ConsumeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Playback_ConsumeResponse {
    return new MpdCommand_Playback_ConsumeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Playback_ConsumeResponse | PlainMessage<MpdCommand_Playback_ConsumeResponse> | undefined, b: MpdCommand_Playback_ConsumeResponse | PlainMessage<MpdCommand_Playback_ConsumeResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Playback_ConsumeResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Playback.RandomRequest
 */
export class MpdCommand_Playback_RandomRequest extends Message<MpdCommand_Playback_RandomRequest> {
  /**
   * @generated from field: bool enable = 1;
   */
  enable = false;

  constructor(data?: PartialMessage<MpdCommand_Playback_RandomRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Playback.RandomRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Playback_RandomRequest {
    return new MpdCommand_Playback_RandomRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Playback_RandomRequest {
    return new MpdCommand_Playback_RandomRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Playback_RandomRequest {
    return new MpdCommand_Playback_RandomRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Playback_RandomRequest | PlainMessage<MpdCommand_Playback_RandomRequest> | undefined, b: MpdCommand_Playback_RandomRequest | PlainMessage<MpdCommand_Playback_RandomRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Playback_RandomRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Playback.RandomResponse
 */
export class MpdCommand_Playback_RandomResponse extends Message<MpdCommand_Playback_RandomResponse> {
  constructor(data?: PartialMessage<MpdCommand_Playback_RandomResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Playback.RandomResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Playback_RandomResponse {
    return new MpdCommand_Playback_RandomResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Playback_RandomResponse {
    return new MpdCommand_Playback_RandomResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Playback_RandomResponse {
    return new MpdCommand_Playback_RandomResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Playback_RandomResponse | PlainMessage<MpdCommand_Playback_RandomResponse> | undefined, b: MpdCommand_Playback_RandomResponse | PlainMessage<MpdCommand_Playback_RandomResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Playback_RandomResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Playback.RepeatRequest
 */
export class MpdCommand_Playback_RepeatRequest extends Message<MpdCommand_Playback_RepeatRequest> {
  /**
   * @generated from field: bool enable = 1;
   */
  enable = false;

  constructor(data?: PartialMessage<MpdCommand_Playback_RepeatRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Playback.RepeatRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Playback_RepeatRequest {
    return new MpdCommand_Playback_RepeatRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Playback_RepeatRequest {
    return new MpdCommand_Playback_RepeatRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Playback_RepeatRequest {
    return new MpdCommand_Playback_RepeatRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Playback_RepeatRequest | PlainMessage<MpdCommand_Playback_RepeatRequest> | undefined, b: MpdCommand_Playback_RepeatRequest | PlainMessage<MpdCommand_Playback_RepeatRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Playback_RepeatRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Playback.RepeatResponse
 */
export class MpdCommand_Playback_RepeatResponse extends Message<MpdCommand_Playback_RepeatResponse> {
  constructor(data?: PartialMessage<MpdCommand_Playback_RepeatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Playback.RepeatResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Playback_RepeatResponse {
    return new MpdCommand_Playback_RepeatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Playback_RepeatResponse {
    return new MpdCommand_Playback_RepeatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Playback_RepeatResponse {
    return new MpdCommand_Playback_RepeatResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Playback_RepeatResponse | PlainMessage<MpdCommand_Playback_RepeatResponse> | undefined, b: MpdCommand_Playback_RepeatResponse | PlainMessage<MpdCommand_Playback_RepeatResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Playback_RepeatResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Playback.SetVolRequest
 */
export class MpdCommand_Playback_SetVolRequest extends Message<MpdCommand_Playback_SetVolRequest> {
  /**
   * @generated from field: int32 vol = 1;
   */
  vol = 0;

  constructor(data?: PartialMessage<MpdCommand_Playback_SetVolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Playback.SetVolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vol", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Playback_SetVolRequest {
    return new MpdCommand_Playback_SetVolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Playback_SetVolRequest {
    return new MpdCommand_Playback_SetVolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Playback_SetVolRequest {
    return new MpdCommand_Playback_SetVolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Playback_SetVolRequest | PlainMessage<MpdCommand_Playback_SetVolRequest> | undefined, b: MpdCommand_Playback_SetVolRequest | PlainMessage<MpdCommand_Playback_SetVolRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Playback_SetVolRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Playback.SetVolResponse
 */
export class MpdCommand_Playback_SetVolResponse extends Message<MpdCommand_Playback_SetVolResponse> {
  constructor(data?: PartialMessage<MpdCommand_Playback_SetVolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Playback.SetVolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Playback_SetVolResponse {
    return new MpdCommand_Playback_SetVolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Playback_SetVolResponse {
    return new MpdCommand_Playback_SetVolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Playback_SetVolResponse {
    return new MpdCommand_Playback_SetVolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Playback_SetVolResponse | PlainMessage<MpdCommand_Playback_SetVolResponse> | undefined, b: MpdCommand_Playback_SetVolResponse | PlainMessage<MpdCommand_Playback_SetVolResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Playback_SetVolResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Playback.GetVolRequest
 */
export class MpdCommand_Playback_GetVolRequest extends Message<MpdCommand_Playback_GetVolRequest> {
  constructor(data?: PartialMessage<MpdCommand_Playback_GetVolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Playback.GetVolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Playback_GetVolRequest {
    return new MpdCommand_Playback_GetVolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Playback_GetVolRequest {
    return new MpdCommand_Playback_GetVolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Playback_GetVolRequest {
    return new MpdCommand_Playback_GetVolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Playback_GetVolRequest | PlainMessage<MpdCommand_Playback_GetVolRequest> | undefined, b: MpdCommand_Playback_GetVolRequest | PlainMessage<MpdCommand_Playback_GetVolRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Playback_GetVolRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Playback.GetVolResponse
 */
export class MpdCommand_Playback_GetVolResponse extends Message<MpdCommand_Playback_GetVolResponse> {
  /**
   * @generated from field: MpdPlayerVolume vol = 1;
   */
  vol?: MpdPlayerVolume;

  constructor(data?: PartialMessage<MpdCommand_Playback_GetVolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Playback.GetVolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vol", kind: "message", T: MpdPlayerVolume },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Playback_GetVolResponse {
    return new MpdCommand_Playback_GetVolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Playback_GetVolResponse {
    return new MpdCommand_Playback_GetVolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Playback_GetVolResponse {
    return new MpdCommand_Playback_GetVolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Playback_GetVolResponse | PlainMessage<MpdCommand_Playback_GetVolResponse> | undefined, b: MpdCommand_Playback_GetVolResponse | PlainMessage<MpdCommand_Playback_GetVolResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Playback_GetVolResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Playback.SingleRequest
 */
export class MpdCommand_Playback_SingleRequest extends Message<MpdCommand_Playback_SingleRequest> {
  /**
   * @generated from field: bool enable = 1;
   */
  enable = false;

  constructor(data?: PartialMessage<MpdCommand_Playback_SingleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Playback.SingleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Playback_SingleRequest {
    return new MpdCommand_Playback_SingleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Playback_SingleRequest {
    return new MpdCommand_Playback_SingleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Playback_SingleRequest {
    return new MpdCommand_Playback_SingleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Playback_SingleRequest | PlainMessage<MpdCommand_Playback_SingleRequest> | undefined, b: MpdCommand_Playback_SingleRequest | PlainMessage<MpdCommand_Playback_SingleRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Playback_SingleRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Playback.SingleResponse
 */
export class MpdCommand_Playback_SingleResponse extends Message<MpdCommand_Playback_SingleResponse> {
  constructor(data?: PartialMessage<MpdCommand_Playback_SingleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Playback.SingleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Playback_SingleResponse {
    return new MpdCommand_Playback_SingleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Playback_SingleResponse {
    return new MpdCommand_Playback_SingleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Playback_SingleResponse {
    return new MpdCommand_Playback_SingleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Playback_SingleResponse | PlainMessage<MpdCommand_Playback_SingleResponse> | undefined, b: MpdCommand_Playback_SingleResponse | PlainMessage<MpdCommand_Playback_SingleResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Playback_SingleResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Status
 */
export class MpdCommand_Status extends Message<MpdCommand_Status> {
  constructor(data?: PartialMessage<MpdCommand_Status>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Status";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Status {
    return new MpdCommand_Status().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Status {
    return new MpdCommand_Status().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Status {
    return new MpdCommand_Status().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Status | PlainMessage<MpdCommand_Status> | undefined, b: MpdCommand_Status | PlainMessage<MpdCommand_Status> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Status, a, b);
  }
}

/**
 * @generated from message MpdCommand.Status.CurrentSongRequest
 */
export class MpdCommand_Status_CurrentSongRequest extends Message<MpdCommand_Status_CurrentSongRequest> {
  constructor(data?: PartialMessage<MpdCommand_Status_CurrentSongRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Status.CurrentSongRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Status_CurrentSongRequest {
    return new MpdCommand_Status_CurrentSongRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Status_CurrentSongRequest {
    return new MpdCommand_Status_CurrentSongRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Status_CurrentSongRequest {
    return new MpdCommand_Status_CurrentSongRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Status_CurrentSongRequest | PlainMessage<MpdCommand_Status_CurrentSongRequest> | undefined, b: MpdCommand_Status_CurrentSongRequest | PlainMessage<MpdCommand_Status_CurrentSongRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Status_CurrentSongRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Status.CurrentSongResponse
 */
export class MpdCommand_Status_CurrentSongResponse extends Message<MpdCommand_Status_CurrentSongResponse> {
  /**
   * @generated from field: Song song = 1;
   */
  song?: Song;

  constructor(data?: PartialMessage<MpdCommand_Status_CurrentSongResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Status.CurrentSongResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "song", kind: "message", T: Song },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Status_CurrentSongResponse {
    return new MpdCommand_Status_CurrentSongResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Status_CurrentSongResponse {
    return new MpdCommand_Status_CurrentSongResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Status_CurrentSongResponse {
    return new MpdCommand_Status_CurrentSongResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Status_CurrentSongResponse | PlainMessage<MpdCommand_Status_CurrentSongResponse> | undefined, b: MpdCommand_Status_CurrentSongResponse | PlainMessage<MpdCommand_Status_CurrentSongResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Status_CurrentSongResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Status.StatusRequest
 */
export class MpdCommand_Status_StatusRequest extends Message<MpdCommand_Status_StatusRequest> {
  constructor(data?: PartialMessage<MpdCommand_Status_StatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Status.StatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Status_StatusRequest {
    return new MpdCommand_Status_StatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Status_StatusRequest {
    return new MpdCommand_Status_StatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Status_StatusRequest {
    return new MpdCommand_Status_StatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Status_StatusRequest | PlainMessage<MpdCommand_Status_StatusRequest> | undefined, b: MpdCommand_Status_StatusRequest | PlainMessage<MpdCommand_Status_StatusRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Status_StatusRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Status.StatusResponse
 */
export class MpdCommand_Status_StatusResponse extends Message<MpdCommand_Status_StatusResponse> {
  /**
   * @generated from field: MpdPlayerStatus status = 1;
   */
  status?: MpdPlayerStatus;

  constructor(data?: PartialMessage<MpdCommand_Status_StatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Status.StatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: MpdPlayerStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Status_StatusResponse {
    return new MpdCommand_Status_StatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Status_StatusResponse {
    return new MpdCommand_Status_StatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Status_StatusResponse {
    return new MpdCommand_Status_StatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Status_StatusResponse | PlainMessage<MpdCommand_Status_StatusResponse> | undefined, b: MpdCommand_Status_StatusResponse | PlainMessage<MpdCommand_Status_StatusResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Status_StatusResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Status.StatsRequest
 */
export class MpdCommand_Status_StatsRequest extends Message<MpdCommand_Status_StatsRequest> {
  constructor(data?: PartialMessage<MpdCommand_Status_StatsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Status.StatsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Status_StatsRequest {
    return new MpdCommand_Status_StatsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Status_StatsRequest {
    return new MpdCommand_Status_StatsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Status_StatsRequest {
    return new MpdCommand_Status_StatsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Status_StatsRequest | PlainMessage<MpdCommand_Status_StatsRequest> | undefined, b: MpdCommand_Status_StatsRequest | PlainMessage<MpdCommand_Status_StatsRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Status_StatsRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Status.StatsResponse
 */
export class MpdCommand_Status_StatsResponse extends Message<MpdCommand_Status_StatsResponse> {
  /**
   * @generated from field: MpdStats stats = 1;
   */
  stats?: MpdStats;

  constructor(data?: PartialMessage<MpdCommand_Status_StatsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Status.StatsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stats", kind: "message", T: MpdStats },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Status_StatsResponse {
    return new MpdCommand_Status_StatsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Status_StatsResponse {
    return new MpdCommand_Status_StatsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Status_StatsResponse {
    return new MpdCommand_Status_StatsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Status_StatsResponse | PlainMessage<MpdCommand_Status_StatsResponse> | undefined, b: MpdCommand_Status_StatsResponse | PlainMessage<MpdCommand_Status_StatsResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Status_StatsResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Queue
 */
export class MpdCommand_Queue extends Message<MpdCommand_Queue> {
  constructor(data?: PartialMessage<MpdCommand_Queue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Queue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Queue {
    return new MpdCommand_Queue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Queue {
    return new MpdCommand_Queue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Queue {
    return new MpdCommand_Queue().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Queue | PlainMessage<MpdCommand_Queue> | undefined, b: MpdCommand_Queue | PlainMessage<MpdCommand_Queue> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Queue, a, b);
  }
}

/**
 * @generated from message MpdCommand.Queue.AddRequest
 */
export class MpdCommand_Queue_AddRequest extends Message<MpdCommand_Queue_AddRequest> {
  /**
   * @generated from field: string uri = 1;
   */
  uri = "";

  constructor(data?: PartialMessage<MpdCommand_Queue_AddRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Queue.AddRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Queue_AddRequest {
    return new MpdCommand_Queue_AddRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Queue_AddRequest {
    return new MpdCommand_Queue_AddRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Queue_AddRequest {
    return new MpdCommand_Queue_AddRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Queue_AddRequest | PlainMessage<MpdCommand_Queue_AddRequest> | undefined, b: MpdCommand_Queue_AddRequest | PlainMessage<MpdCommand_Queue_AddRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Queue_AddRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Queue.AddResponse
 */
export class MpdCommand_Queue_AddResponse extends Message<MpdCommand_Queue_AddResponse> {
  constructor(data?: PartialMessage<MpdCommand_Queue_AddResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Queue.AddResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Queue_AddResponse {
    return new MpdCommand_Queue_AddResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Queue_AddResponse {
    return new MpdCommand_Queue_AddResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Queue_AddResponse {
    return new MpdCommand_Queue_AddResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Queue_AddResponse | PlainMessage<MpdCommand_Queue_AddResponse> | undefined, b: MpdCommand_Queue_AddResponse | PlainMessage<MpdCommand_Queue_AddResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Queue_AddResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Queue.ClearRequest
 */
export class MpdCommand_Queue_ClearRequest extends Message<MpdCommand_Queue_ClearRequest> {
  constructor(data?: PartialMessage<MpdCommand_Queue_ClearRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Queue.ClearRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Queue_ClearRequest {
    return new MpdCommand_Queue_ClearRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Queue_ClearRequest {
    return new MpdCommand_Queue_ClearRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Queue_ClearRequest {
    return new MpdCommand_Queue_ClearRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Queue_ClearRequest | PlainMessage<MpdCommand_Queue_ClearRequest> | undefined, b: MpdCommand_Queue_ClearRequest | PlainMessage<MpdCommand_Queue_ClearRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Queue_ClearRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Queue.ClearResponse
 */
export class MpdCommand_Queue_ClearResponse extends Message<MpdCommand_Queue_ClearResponse> {
  constructor(data?: PartialMessage<MpdCommand_Queue_ClearResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Queue.ClearResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Queue_ClearResponse {
    return new MpdCommand_Queue_ClearResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Queue_ClearResponse {
    return new MpdCommand_Queue_ClearResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Queue_ClearResponse {
    return new MpdCommand_Queue_ClearResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Queue_ClearResponse | PlainMessage<MpdCommand_Queue_ClearResponse> | undefined, b: MpdCommand_Queue_ClearResponse | PlainMessage<MpdCommand_Queue_ClearResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Queue_ClearResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Queue.DeleteRequest
 */
export class MpdCommand_Queue_DeleteRequest extends Message<MpdCommand_Queue_DeleteRequest> {
  /**
   * @generated from oneof MpdCommand.Queue.DeleteRequest.target
   */
  target: {
    /**
     * @generated from field: string pos = 1;
     */
    value: string;
    case: "pos";
  } | {
    /**
     * @generated from field: string id = 2;
     */
    value: string;
    case: "id";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MpdCommand_Queue_DeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Queue.DeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pos", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "target" },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "target" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Queue_DeleteRequest {
    return new MpdCommand_Queue_DeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Queue_DeleteRequest {
    return new MpdCommand_Queue_DeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Queue_DeleteRequest {
    return new MpdCommand_Queue_DeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Queue_DeleteRequest | PlainMessage<MpdCommand_Queue_DeleteRequest> | undefined, b: MpdCommand_Queue_DeleteRequest | PlainMessage<MpdCommand_Queue_DeleteRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Queue_DeleteRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Queue.DeleteResponse
 */
export class MpdCommand_Queue_DeleteResponse extends Message<MpdCommand_Queue_DeleteResponse> {
  constructor(data?: PartialMessage<MpdCommand_Queue_DeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Queue.DeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Queue_DeleteResponse {
    return new MpdCommand_Queue_DeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Queue_DeleteResponse {
    return new MpdCommand_Queue_DeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Queue_DeleteResponse {
    return new MpdCommand_Queue_DeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Queue_DeleteResponse | PlainMessage<MpdCommand_Queue_DeleteResponse> | undefined, b: MpdCommand_Queue_DeleteResponse | PlainMessage<MpdCommand_Queue_DeleteResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Queue_DeleteResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Queue.MoveRequest
 */
export class MpdCommand_Queue_MoveRequest extends Message<MpdCommand_Queue_MoveRequest> {
  /**
   * @generated from oneof MpdCommand.Queue.MoveRequest.from
   */
  from: {
    /**
     * @generated from field: string from_pos = 1;
     */
    value: string;
    case: "fromPos";
  } | {
    /**
     * @generated from field: string from_id = 2;
     */
    value: string;
    case: "fromId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: string to = 3;
   */
  to = "";

  constructor(data?: PartialMessage<MpdCommand_Queue_MoveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Queue.MoveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_pos", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "from" },
    { no: 2, name: "from_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "from" },
    { no: 3, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Queue_MoveRequest {
    return new MpdCommand_Queue_MoveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Queue_MoveRequest {
    return new MpdCommand_Queue_MoveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Queue_MoveRequest {
    return new MpdCommand_Queue_MoveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Queue_MoveRequest | PlainMessage<MpdCommand_Queue_MoveRequest> | undefined, b: MpdCommand_Queue_MoveRequest | PlainMessage<MpdCommand_Queue_MoveRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Queue_MoveRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Queue.MoveResponse
 */
export class MpdCommand_Queue_MoveResponse extends Message<MpdCommand_Queue_MoveResponse> {
  constructor(data?: PartialMessage<MpdCommand_Queue_MoveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Queue.MoveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Queue_MoveResponse {
    return new MpdCommand_Queue_MoveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Queue_MoveResponse {
    return new MpdCommand_Queue_MoveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Queue_MoveResponse {
    return new MpdCommand_Queue_MoveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Queue_MoveResponse | PlainMessage<MpdCommand_Queue_MoveResponse> | undefined, b: MpdCommand_Queue_MoveResponse | PlainMessage<MpdCommand_Queue_MoveResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Queue_MoveResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Queue.PlaylistInfoRequest
 */
export class MpdCommand_Queue_PlaylistInfoRequest extends Message<MpdCommand_Queue_PlaylistInfoRequest> {
  constructor(data?: PartialMessage<MpdCommand_Queue_PlaylistInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Queue.PlaylistInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Queue_PlaylistInfoRequest {
    return new MpdCommand_Queue_PlaylistInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Queue_PlaylistInfoRequest {
    return new MpdCommand_Queue_PlaylistInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Queue_PlaylistInfoRequest {
    return new MpdCommand_Queue_PlaylistInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Queue_PlaylistInfoRequest | PlainMessage<MpdCommand_Queue_PlaylistInfoRequest> | undefined, b: MpdCommand_Queue_PlaylistInfoRequest | PlainMessage<MpdCommand_Queue_PlaylistInfoRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Queue_PlaylistInfoRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Queue.PlaylistInfoResponse
 */
export class MpdCommand_Queue_PlaylistInfoResponse extends Message<MpdCommand_Queue_PlaylistInfoResponse> {
  /**
   * @generated from field: repeated Song songs = 1;
   */
  songs: Song[] = [];

  constructor(data?: PartialMessage<MpdCommand_Queue_PlaylistInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Queue.PlaylistInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "songs", kind: "message", T: Song, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Queue_PlaylistInfoResponse {
    return new MpdCommand_Queue_PlaylistInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Queue_PlaylistInfoResponse {
    return new MpdCommand_Queue_PlaylistInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Queue_PlaylistInfoResponse {
    return new MpdCommand_Queue_PlaylistInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Queue_PlaylistInfoResponse | PlainMessage<MpdCommand_Queue_PlaylistInfoResponse> | undefined, b: MpdCommand_Queue_PlaylistInfoResponse | PlainMessage<MpdCommand_Queue_PlaylistInfoResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Queue_PlaylistInfoResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Queue.ShuffleRequest
 */
export class MpdCommand_Queue_ShuffleRequest extends Message<MpdCommand_Queue_ShuffleRequest> {
  constructor(data?: PartialMessage<MpdCommand_Queue_ShuffleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Queue.ShuffleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Queue_ShuffleRequest {
    return new MpdCommand_Queue_ShuffleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Queue_ShuffleRequest {
    return new MpdCommand_Queue_ShuffleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Queue_ShuffleRequest {
    return new MpdCommand_Queue_ShuffleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Queue_ShuffleRequest | PlainMessage<MpdCommand_Queue_ShuffleRequest> | undefined, b: MpdCommand_Queue_ShuffleRequest | PlainMessage<MpdCommand_Queue_ShuffleRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Queue_ShuffleRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Queue.ShuffleResponse
 */
export class MpdCommand_Queue_ShuffleResponse extends Message<MpdCommand_Queue_ShuffleResponse> {
  constructor(data?: PartialMessage<MpdCommand_Queue_ShuffleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Queue.ShuffleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Queue_ShuffleResponse {
    return new MpdCommand_Queue_ShuffleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Queue_ShuffleResponse {
    return new MpdCommand_Queue_ShuffleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Queue_ShuffleResponse {
    return new MpdCommand_Queue_ShuffleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Queue_ShuffleResponse | PlainMessage<MpdCommand_Queue_ShuffleResponse> | undefined, b: MpdCommand_Queue_ShuffleResponse | PlainMessage<MpdCommand_Queue_ShuffleResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Queue_ShuffleResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist
 */
export class MpdCommand_StoredPlaylist extends Message<MpdCommand_StoredPlaylist> {
  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist {
    return new MpdCommand_StoredPlaylist().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist {
    return new MpdCommand_StoredPlaylist().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist {
    return new MpdCommand_StoredPlaylist().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist | PlainMessage<MpdCommand_StoredPlaylist> | undefined, b: MpdCommand_StoredPlaylist | PlainMessage<MpdCommand_StoredPlaylist> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist.ListPlaylistInfoRequest
 */
export class MpdCommand_StoredPlaylist_ListPlaylistInfoRequest extends Message<MpdCommand_StoredPlaylist_ListPlaylistInfoRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist_ListPlaylistInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist.ListPlaylistInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist_ListPlaylistInfoRequest {
    return new MpdCommand_StoredPlaylist_ListPlaylistInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_ListPlaylistInfoRequest {
    return new MpdCommand_StoredPlaylist_ListPlaylistInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_ListPlaylistInfoRequest {
    return new MpdCommand_StoredPlaylist_ListPlaylistInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist_ListPlaylistInfoRequest | PlainMessage<MpdCommand_StoredPlaylist_ListPlaylistInfoRequest> | undefined, b: MpdCommand_StoredPlaylist_ListPlaylistInfoRequest | PlainMessage<MpdCommand_StoredPlaylist_ListPlaylistInfoRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist_ListPlaylistInfoRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist.ListPlaylistInfoResponse
 */
export class MpdCommand_StoredPlaylist_ListPlaylistInfoResponse extends Message<MpdCommand_StoredPlaylist_ListPlaylistInfoResponse> {
  /**
   * @generated from field: repeated Song songs = 1;
   */
  songs: Song[] = [];

  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist_ListPlaylistInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist.ListPlaylistInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "songs", kind: "message", T: Song, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist_ListPlaylistInfoResponse {
    return new MpdCommand_StoredPlaylist_ListPlaylistInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_ListPlaylistInfoResponse {
    return new MpdCommand_StoredPlaylist_ListPlaylistInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_ListPlaylistInfoResponse {
    return new MpdCommand_StoredPlaylist_ListPlaylistInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist_ListPlaylistInfoResponse | PlainMessage<MpdCommand_StoredPlaylist_ListPlaylistInfoResponse> | undefined, b: MpdCommand_StoredPlaylist_ListPlaylistInfoResponse | PlainMessage<MpdCommand_StoredPlaylist_ListPlaylistInfoResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist_ListPlaylistInfoResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist.ListPlaylistsRequest
 */
export class MpdCommand_StoredPlaylist_ListPlaylistsRequest extends Message<MpdCommand_StoredPlaylist_ListPlaylistsRequest> {
  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist_ListPlaylistsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist.ListPlaylistsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist_ListPlaylistsRequest {
    return new MpdCommand_StoredPlaylist_ListPlaylistsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_ListPlaylistsRequest {
    return new MpdCommand_StoredPlaylist_ListPlaylistsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_ListPlaylistsRequest {
    return new MpdCommand_StoredPlaylist_ListPlaylistsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist_ListPlaylistsRequest | PlainMessage<MpdCommand_StoredPlaylist_ListPlaylistsRequest> | undefined, b: MpdCommand_StoredPlaylist_ListPlaylistsRequest | PlainMessage<MpdCommand_StoredPlaylist_ListPlaylistsRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist_ListPlaylistsRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist.ListPlaylistsResponse
 */
export class MpdCommand_StoredPlaylist_ListPlaylistsResponse extends Message<MpdCommand_StoredPlaylist_ListPlaylistsResponse> {
  /**
   * @generated from field: repeated Playlist playlists = 1;
   */
  playlists: Playlist[] = [];

  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist_ListPlaylistsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist.ListPlaylistsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "playlists", kind: "message", T: Playlist, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist_ListPlaylistsResponse {
    return new MpdCommand_StoredPlaylist_ListPlaylistsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_ListPlaylistsResponse {
    return new MpdCommand_StoredPlaylist_ListPlaylistsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_ListPlaylistsResponse {
    return new MpdCommand_StoredPlaylist_ListPlaylistsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist_ListPlaylistsResponse | PlainMessage<MpdCommand_StoredPlaylist_ListPlaylistsResponse> | undefined, b: MpdCommand_StoredPlaylist_ListPlaylistsResponse | PlainMessage<MpdCommand_StoredPlaylist_ListPlaylistsResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist_ListPlaylistsResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist.PlaylistAddRequest
 */
export class MpdCommand_StoredPlaylist_PlaylistAddRequest extends Message<MpdCommand_StoredPlaylist_PlaylistAddRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string uri = 2;
   */
  uri = "";

  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist_PlaylistAddRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist.PlaylistAddRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist_PlaylistAddRequest {
    return new MpdCommand_StoredPlaylist_PlaylistAddRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_PlaylistAddRequest {
    return new MpdCommand_StoredPlaylist_PlaylistAddRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_PlaylistAddRequest {
    return new MpdCommand_StoredPlaylist_PlaylistAddRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist_PlaylistAddRequest | PlainMessage<MpdCommand_StoredPlaylist_PlaylistAddRequest> | undefined, b: MpdCommand_StoredPlaylist_PlaylistAddRequest | PlainMessage<MpdCommand_StoredPlaylist_PlaylistAddRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist_PlaylistAddRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist.PlaylistAddResponse
 */
export class MpdCommand_StoredPlaylist_PlaylistAddResponse extends Message<MpdCommand_StoredPlaylist_PlaylistAddResponse> {
  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist_PlaylistAddResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist.PlaylistAddResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist_PlaylistAddResponse {
    return new MpdCommand_StoredPlaylist_PlaylistAddResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_PlaylistAddResponse {
    return new MpdCommand_StoredPlaylist_PlaylistAddResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_PlaylistAddResponse {
    return new MpdCommand_StoredPlaylist_PlaylistAddResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist_PlaylistAddResponse | PlainMessage<MpdCommand_StoredPlaylist_PlaylistAddResponse> | undefined, b: MpdCommand_StoredPlaylist_PlaylistAddResponse | PlainMessage<MpdCommand_StoredPlaylist_PlaylistAddResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist_PlaylistAddResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist.PlaylistClearRequest
 */
export class MpdCommand_StoredPlaylist_PlaylistClearRequest extends Message<MpdCommand_StoredPlaylist_PlaylistClearRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist_PlaylistClearRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist.PlaylistClearRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist_PlaylistClearRequest {
    return new MpdCommand_StoredPlaylist_PlaylistClearRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_PlaylistClearRequest {
    return new MpdCommand_StoredPlaylist_PlaylistClearRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_PlaylistClearRequest {
    return new MpdCommand_StoredPlaylist_PlaylistClearRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist_PlaylistClearRequest | PlainMessage<MpdCommand_StoredPlaylist_PlaylistClearRequest> | undefined, b: MpdCommand_StoredPlaylist_PlaylistClearRequest | PlainMessage<MpdCommand_StoredPlaylist_PlaylistClearRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist_PlaylistClearRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist.PlaylistClearResponse
 */
export class MpdCommand_StoredPlaylist_PlaylistClearResponse extends Message<MpdCommand_StoredPlaylist_PlaylistClearResponse> {
  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist_PlaylistClearResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist.PlaylistClearResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist_PlaylistClearResponse {
    return new MpdCommand_StoredPlaylist_PlaylistClearResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_PlaylistClearResponse {
    return new MpdCommand_StoredPlaylist_PlaylistClearResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_PlaylistClearResponse {
    return new MpdCommand_StoredPlaylist_PlaylistClearResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist_PlaylistClearResponse | PlainMessage<MpdCommand_StoredPlaylist_PlaylistClearResponse> | undefined, b: MpdCommand_StoredPlaylist_PlaylistClearResponse | PlainMessage<MpdCommand_StoredPlaylist_PlaylistClearResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist_PlaylistClearResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist.PlaylistDeleteRequest
 */
export class MpdCommand_StoredPlaylist_PlaylistDeleteRequest extends Message<MpdCommand_StoredPlaylist_PlaylistDeleteRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string pos = 2;
   */
  pos = "";

  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist_PlaylistDeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist.PlaylistDeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pos", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist_PlaylistDeleteRequest {
    return new MpdCommand_StoredPlaylist_PlaylistDeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_PlaylistDeleteRequest {
    return new MpdCommand_StoredPlaylist_PlaylistDeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_PlaylistDeleteRequest {
    return new MpdCommand_StoredPlaylist_PlaylistDeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist_PlaylistDeleteRequest | PlainMessage<MpdCommand_StoredPlaylist_PlaylistDeleteRequest> | undefined, b: MpdCommand_StoredPlaylist_PlaylistDeleteRequest | PlainMessage<MpdCommand_StoredPlaylist_PlaylistDeleteRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist_PlaylistDeleteRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist.PlaylistDeleteResponse
 */
export class MpdCommand_StoredPlaylist_PlaylistDeleteResponse extends Message<MpdCommand_StoredPlaylist_PlaylistDeleteResponse> {
  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist_PlaylistDeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist.PlaylistDeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist_PlaylistDeleteResponse {
    return new MpdCommand_StoredPlaylist_PlaylistDeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_PlaylistDeleteResponse {
    return new MpdCommand_StoredPlaylist_PlaylistDeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_PlaylistDeleteResponse {
    return new MpdCommand_StoredPlaylist_PlaylistDeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist_PlaylistDeleteResponse | PlainMessage<MpdCommand_StoredPlaylist_PlaylistDeleteResponse> | undefined, b: MpdCommand_StoredPlaylist_PlaylistDeleteResponse | PlainMessage<MpdCommand_StoredPlaylist_PlaylistDeleteResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist_PlaylistDeleteResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist.PlaylistMoveRequest
 */
export class MpdCommand_StoredPlaylist_PlaylistMoveRequest extends Message<MpdCommand_StoredPlaylist_PlaylistMoveRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string from = 2;
   */
  from = "";

  /**
   * @generated from field: string to = 3;
   */
  to = "";

  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist_PlaylistMoveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist.PlaylistMoveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "to", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist_PlaylistMoveRequest {
    return new MpdCommand_StoredPlaylist_PlaylistMoveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_PlaylistMoveRequest {
    return new MpdCommand_StoredPlaylist_PlaylistMoveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_PlaylistMoveRequest {
    return new MpdCommand_StoredPlaylist_PlaylistMoveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist_PlaylistMoveRequest | PlainMessage<MpdCommand_StoredPlaylist_PlaylistMoveRequest> | undefined, b: MpdCommand_StoredPlaylist_PlaylistMoveRequest | PlainMessage<MpdCommand_StoredPlaylist_PlaylistMoveRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist_PlaylistMoveRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist.PlaylistMoveResponse
 */
export class MpdCommand_StoredPlaylist_PlaylistMoveResponse extends Message<MpdCommand_StoredPlaylist_PlaylistMoveResponse> {
  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist_PlaylistMoveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist.PlaylistMoveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist_PlaylistMoveResponse {
    return new MpdCommand_StoredPlaylist_PlaylistMoveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_PlaylistMoveResponse {
    return new MpdCommand_StoredPlaylist_PlaylistMoveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_PlaylistMoveResponse {
    return new MpdCommand_StoredPlaylist_PlaylistMoveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist_PlaylistMoveResponse | PlainMessage<MpdCommand_StoredPlaylist_PlaylistMoveResponse> | undefined, b: MpdCommand_StoredPlaylist_PlaylistMoveResponse | PlainMessage<MpdCommand_StoredPlaylist_PlaylistMoveResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist_PlaylistMoveResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist.RenameRequest
 */
export class MpdCommand_StoredPlaylist_RenameRequest extends Message<MpdCommand_StoredPlaylist_RenameRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string new_name = 2;
   */
  newName = "";

  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist_RenameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist.RenameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "new_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist_RenameRequest {
    return new MpdCommand_StoredPlaylist_RenameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_RenameRequest {
    return new MpdCommand_StoredPlaylist_RenameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_RenameRequest {
    return new MpdCommand_StoredPlaylist_RenameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist_RenameRequest | PlainMessage<MpdCommand_StoredPlaylist_RenameRequest> | undefined, b: MpdCommand_StoredPlaylist_RenameRequest | PlainMessage<MpdCommand_StoredPlaylist_RenameRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist_RenameRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist.RenameResponse
 */
export class MpdCommand_StoredPlaylist_RenameResponse extends Message<MpdCommand_StoredPlaylist_RenameResponse> {
  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist_RenameResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist.RenameResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist_RenameResponse {
    return new MpdCommand_StoredPlaylist_RenameResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_RenameResponse {
    return new MpdCommand_StoredPlaylist_RenameResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_RenameResponse {
    return new MpdCommand_StoredPlaylist_RenameResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist_RenameResponse | PlainMessage<MpdCommand_StoredPlaylist_RenameResponse> | undefined, b: MpdCommand_StoredPlaylist_RenameResponse | PlainMessage<MpdCommand_StoredPlaylist_RenameResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist_RenameResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist.RemoveRequest
 */
export class MpdCommand_StoredPlaylist_RemoveRequest extends Message<MpdCommand_StoredPlaylist_RemoveRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist_RemoveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist.RemoveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist_RemoveRequest {
    return new MpdCommand_StoredPlaylist_RemoveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_RemoveRequest {
    return new MpdCommand_StoredPlaylist_RemoveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_RemoveRequest {
    return new MpdCommand_StoredPlaylist_RemoveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist_RemoveRequest | PlainMessage<MpdCommand_StoredPlaylist_RemoveRequest> | undefined, b: MpdCommand_StoredPlaylist_RemoveRequest | PlainMessage<MpdCommand_StoredPlaylist_RemoveRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist_RemoveRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist.RemoveResponse
 */
export class MpdCommand_StoredPlaylist_RemoveResponse extends Message<MpdCommand_StoredPlaylist_RemoveResponse> {
  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist_RemoveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist.RemoveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist_RemoveResponse {
    return new MpdCommand_StoredPlaylist_RemoveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_RemoveResponse {
    return new MpdCommand_StoredPlaylist_RemoveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_RemoveResponse {
    return new MpdCommand_StoredPlaylist_RemoveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist_RemoveResponse | PlainMessage<MpdCommand_StoredPlaylist_RemoveResponse> | undefined, b: MpdCommand_StoredPlaylist_RemoveResponse | PlainMessage<MpdCommand_StoredPlaylist_RemoveResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist_RemoveResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist.SaveRequest
 */
export class MpdCommand_StoredPlaylist_SaveRequest extends Message<MpdCommand_StoredPlaylist_SaveRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist_SaveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist.SaveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist_SaveRequest {
    return new MpdCommand_StoredPlaylist_SaveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_SaveRequest {
    return new MpdCommand_StoredPlaylist_SaveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_SaveRequest {
    return new MpdCommand_StoredPlaylist_SaveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist_SaveRequest | PlainMessage<MpdCommand_StoredPlaylist_SaveRequest> | undefined, b: MpdCommand_StoredPlaylist_SaveRequest | PlainMessage<MpdCommand_StoredPlaylist_SaveRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist_SaveRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.StoredPlaylist.SaveResponse
 */
export class MpdCommand_StoredPlaylist_SaveResponse extends Message<MpdCommand_StoredPlaylist_SaveResponse> {
  constructor(data?: PartialMessage<MpdCommand_StoredPlaylist_SaveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.StoredPlaylist.SaveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_StoredPlaylist_SaveResponse {
    return new MpdCommand_StoredPlaylist_SaveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_SaveResponse {
    return new MpdCommand_StoredPlaylist_SaveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_StoredPlaylist_SaveResponse {
    return new MpdCommand_StoredPlaylist_SaveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_StoredPlaylist_SaveResponse | PlainMessage<MpdCommand_StoredPlaylist_SaveResponse> | undefined, b: MpdCommand_StoredPlaylist_SaveResponse | PlainMessage<MpdCommand_StoredPlaylist_SaveResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_StoredPlaylist_SaveResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Database
 */
export class MpdCommand_Database extends Message<MpdCommand_Database> {
  constructor(data?: PartialMessage<MpdCommand_Database>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Database";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Database {
    return new MpdCommand_Database().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Database {
    return new MpdCommand_Database().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Database {
    return new MpdCommand_Database().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Database | PlainMessage<MpdCommand_Database> | undefined, b: MpdCommand_Database | PlainMessage<MpdCommand_Database> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Database, a, b);
  }
}

/**
 * @generated from message MpdCommand.Database.ListRequest
 */
export class MpdCommand_Database_ListRequest extends Message<MpdCommand_Database_ListRequest> {
  /**
   * @generated from field: Song.MetadataTag tag = 1;
   */
  tag = Song_MetadataTag.UNKNOWN;

  /**
   * @generated from field: repeated FilterCondition conditions = 2;
   */
  conditions: FilterCondition[] = [];

  constructor(data?: PartialMessage<MpdCommand_Database_ListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Database.ListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tag", kind: "enum", T: proto3.getEnumType(Song_MetadataTag) },
    { no: 2, name: "conditions", kind: "message", T: FilterCondition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Database_ListRequest {
    return new MpdCommand_Database_ListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Database_ListRequest {
    return new MpdCommand_Database_ListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Database_ListRequest {
    return new MpdCommand_Database_ListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Database_ListRequest | PlainMessage<MpdCommand_Database_ListRequest> | undefined, b: MpdCommand_Database_ListRequest | PlainMessage<MpdCommand_Database_ListRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Database_ListRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Database.ListResponse
 */
export class MpdCommand_Database_ListResponse extends Message<MpdCommand_Database_ListResponse> {
  /**
   * @generated from field: repeated string values = 1;
   */
  values: string[] = [];

  constructor(data?: PartialMessage<MpdCommand_Database_ListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Database.ListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Database_ListResponse {
    return new MpdCommand_Database_ListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Database_ListResponse {
    return new MpdCommand_Database_ListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Database_ListResponse {
    return new MpdCommand_Database_ListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Database_ListResponse | PlainMessage<MpdCommand_Database_ListResponse> | undefined, b: MpdCommand_Database_ListResponse | PlainMessage<MpdCommand_Database_ListResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Database_ListResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Database.SearchRequest
 */
export class MpdCommand_Database_SearchRequest extends Message<MpdCommand_Database_SearchRequest> {
  /**
   * @generated from field: repeated FilterCondition conditions = 1;
   */
  conditions: FilterCondition[] = [];

  constructor(data?: PartialMessage<MpdCommand_Database_SearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Database.SearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "conditions", kind: "message", T: FilterCondition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Database_SearchRequest {
    return new MpdCommand_Database_SearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Database_SearchRequest {
    return new MpdCommand_Database_SearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Database_SearchRequest {
    return new MpdCommand_Database_SearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Database_SearchRequest | PlainMessage<MpdCommand_Database_SearchRequest> | undefined, b: MpdCommand_Database_SearchRequest | PlainMessage<MpdCommand_Database_SearchRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Database_SearchRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Database.SearchResponse
 */
export class MpdCommand_Database_SearchResponse extends Message<MpdCommand_Database_SearchResponse> {
  /**
   * @generated from field: repeated Song songs = 1;
   */
  songs: Song[] = [];

  constructor(data?: PartialMessage<MpdCommand_Database_SearchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Database.SearchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "songs", kind: "message", T: Song, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Database_SearchResponse {
    return new MpdCommand_Database_SearchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Database_SearchResponse {
    return new MpdCommand_Database_SearchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Database_SearchResponse {
    return new MpdCommand_Database_SearchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Database_SearchResponse | PlainMessage<MpdCommand_Database_SearchResponse> | undefined, b: MpdCommand_Database_SearchResponse | PlainMessage<MpdCommand_Database_SearchResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Database_SearchResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Database.UpdateRequest
 */
export class MpdCommand_Database_UpdateRequest extends Message<MpdCommand_Database_UpdateRequest> {
  constructor(data?: PartialMessage<MpdCommand_Database_UpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Database.UpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Database_UpdateRequest {
    return new MpdCommand_Database_UpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Database_UpdateRequest {
    return new MpdCommand_Database_UpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Database_UpdateRequest {
    return new MpdCommand_Database_UpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Database_UpdateRequest | PlainMessage<MpdCommand_Database_UpdateRequest> | undefined, b: MpdCommand_Database_UpdateRequest | PlainMessage<MpdCommand_Database_UpdateRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Database_UpdateRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Database.UpdateResponse
 */
export class MpdCommand_Database_UpdateResponse extends Message<MpdCommand_Database_UpdateResponse> {
  constructor(data?: PartialMessage<MpdCommand_Database_UpdateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Database.UpdateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Database_UpdateResponse {
    return new MpdCommand_Database_UpdateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Database_UpdateResponse {
    return new MpdCommand_Database_UpdateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Database_UpdateResponse {
    return new MpdCommand_Database_UpdateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Database_UpdateResponse | PlainMessage<MpdCommand_Database_UpdateResponse> | undefined, b: MpdCommand_Database_UpdateResponse | PlainMessage<MpdCommand_Database_UpdateResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Database_UpdateResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Audio
 */
export class MpdCommand_Audio extends Message<MpdCommand_Audio> {
  constructor(data?: PartialMessage<MpdCommand_Audio>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Audio";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Audio {
    return new MpdCommand_Audio().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Audio {
    return new MpdCommand_Audio().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Audio {
    return new MpdCommand_Audio().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Audio | PlainMessage<MpdCommand_Audio> | undefined, b: MpdCommand_Audio | PlainMessage<MpdCommand_Audio> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Audio, a, b);
  }
}

/**
 * @generated from message MpdCommand.Audio.OutputsRequest
 */
export class MpdCommand_Audio_OutputsRequest extends Message<MpdCommand_Audio_OutputsRequest> {
  constructor(data?: PartialMessage<MpdCommand_Audio_OutputsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Audio.OutputsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Audio_OutputsRequest {
    return new MpdCommand_Audio_OutputsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Audio_OutputsRequest {
    return new MpdCommand_Audio_OutputsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Audio_OutputsRequest {
    return new MpdCommand_Audio_OutputsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Audio_OutputsRequest | PlainMessage<MpdCommand_Audio_OutputsRequest> | undefined, b: MpdCommand_Audio_OutputsRequest | PlainMessage<MpdCommand_Audio_OutputsRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Audio_OutputsRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Audio.OutputsResponse
 */
export class MpdCommand_Audio_OutputsResponse extends Message<MpdCommand_Audio_OutputsResponse> {
  /**
   * @generated from field: repeated MpdOutputDevice devices = 1;
   */
  devices: MpdOutputDevice[] = [];

  constructor(data?: PartialMessage<MpdCommand_Audio_OutputsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Audio.OutputsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "devices", kind: "message", T: MpdOutputDevice, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Audio_OutputsResponse {
    return new MpdCommand_Audio_OutputsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Audio_OutputsResponse {
    return new MpdCommand_Audio_OutputsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Audio_OutputsResponse {
    return new MpdCommand_Audio_OutputsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Audio_OutputsResponse | PlainMessage<MpdCommand_Audio_OutputsResponse> | undefined, b: MpdCommand_Audio_OutputsResponse | PlainMessage<MpdCommand_Audio_OutputsResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Audio_OutputsResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Utility
 */
export class MpdCommand_Utility extends Message<MpdCommand_Utility> {
  constructor(data?: PartialMessage<MpdCommand_Utility>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Utility";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Utility {
    return new MpdCommand_Utility().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Utility {
    return new MpdCommand_Utility().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Utility {
    return new MpdCommand_Utility().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Utility | PlainMessage<MpdCommand_Utility> | undefined, b: MpdCommand_Utility | PlainMessage<MpdCommand_Utility> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Utility, a, b);
  }
}

/**
 * @generated from message MpdCommand.Utility.ListAllSongsRequest
 */
export class MpdCommand_Utility_ListAllSongsRequest extends Message<MpdCommand_Utility_ListAllSongsRequest> {
  constructor(data?: PartialMessage<MpdCommand_Utility_ListAllSongsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Utility.ListAllSongsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Utility_ListAllSongsRequest {
    return new MpdCommand_Utility_ListAllSongsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Utility_ListAllSongsRequest {
    return new MpdCommand_Utility_ListAllSongsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Utility_ListAllSongsRequest {
    return new MpdCommand_Utility_ListAllSongsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Utility_ListAllSongsRequest | PlainMessage<MpdCommand_Utility_ListAllSongsRequest> | undefined, b: MpdCommand_Utility_ListAllSongsRequest | PlainMessage<MpdCommand_Utility_ListAllSongsRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Utility_ListAllSongsRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Utility.ListAllSongsResponse
 */
export class MpdCommand_Utility_ListAllSongsResponse extends Message<MpdCommand_Utility_ListAllSongsResponse> {
  /**
   * @generated from field: repeated Song songs = 1;
   */
  songs: Song[] = [];

  constructor(data?: PartialMessage<MpdCommand_Utility_ListAllSongsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Utility.ListAllSongsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "songs", kind: "message", T: Song, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Utility_ListAllSongsResponse {
    return new MpdCommand_Utility_ListAllSongsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Utility_ListAllSongsResponse {
    return new MpdCommand_Utility_ListAllSongsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Utility_ListAllSongsResponse {
    return new MpdCommand_Utility_ListAllSongsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Utility_ListAllSongsResponse | PlainMessage<MpdCommand_Utility_ListAllSongsResponse> | undefined, b: MpdCommand_Utility_ListAllSongsResponse | PlainMessage<MpdCommand_Utility_ListAllSongsResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Utility_ListAllSongsResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Utility.ListAllFoldersRequest
 */
export class MpdCommand_Utility_ListAllFoldersRequest extends Message<MpdCommand_Utility_ListAllFoldersRequest> {
  constructor(data?: PartialMessage<MpdCommand_Utility_ListAllFoldersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Utility.ListAllFoldersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Utility_ListAllFoldersRequest {
    return new MpdCommand_Utility_ListAllFoldersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Utility_ListAllFoldersRequest {
    return new MpdCommand_Utility_ListAllFoldersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Utility_ListAllFoldersRequest {
    return new MpdCommand_Utility_ListAllFoldersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Utility_ListAllFoldersRequest | PlainMessage<MpdCommand_Utility_ListAllFoldersRequest> | undefined, b: MpdCommand_Utility_ListAllFoldersRequest | PlainMessage<MpdCommand_Utility_ListAllFoldersRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Utility_ListAllFoldersRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Utility.ListAllFoldersResponse
 */
export class MpdCommand_Utility_ListAllFoldersResponse extends Message<MpdCommand_Utility_ListAllFoldersResponse> {
  /**
   * @generated from field: repeated Folder folders = 1;
   */
  folders: Folder[] = [];

  constructor(data?: PartialMessage<MpdCommand_Utility_ListAllFoldersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Utility.ListAllFoldersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "folders", kind: "message", T: Folder, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Utility_ListAllFoldersResponse {
    return new MpdCommand_Utility_ListAllFoldersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Utility_ListAllFoldersResponse {
    return new MpdCommand_Utility_ListAllFoldersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Utility_ListAllFoldersResponse {
    return new MpdCommand_Utility_ListAllFoldersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Utility_ListAllFoldersResponse | PlainMessage<MpdCommand_Utility_ListAllFoldersResponse> | undefined, b: MpdCommand_Utility_ListAllFoldersResponse | PlainMessage<MpdCommand_Utility_ListAllFoldersResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Utility_ListAllFoldersResponse, a, b);
  }
}

/**
 * @generated from message MpdCommand.Utility.ListSongsInFolderRequest
 */
export class MpdCommand_Utility_ListSongsInFolderRequest extends Message<MpdCommand_Utility_ListSongsInFolderRequest> {
  /**
   * @generated from field: Folder folder = 1;
   */
  folder?: Folder;

  constructor(data?: PartialMessage<MpdCommand_Utility_ListSongsInFolderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Utility.ListSongsInFolderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "folder", kind: "message", T: Folder },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Utility_ListSongsInFolderRequest {
    return new MpdCommand_Utility_ListSongsInFolderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Utility_ListSongsInFolderRequest {
    return new MpdCommand_Utility_ListSongsInFolderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Utility_ListSongsInFolderRequest {
    return new MpdCommand_Utility_ListSongsInFolderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Utility_ListSongsInFolderRequest | PlainMessage<MpdCommand_Utility_ListSongsInFolderRequest> | undefined, b: MpdCommand_Utility_ListSongsInFolderRequest | PlainMessage<MpdCommand_Utility_ListSongsInFolderRequest> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Utility_ListSongsInFolderRequest, a, b);
  }
}

/**
 * @generated from message MpdCommand.Utility.ListSongsInFolderResponse
 */
export class MpdCommand_Utility_ListSongsInFolderResponse extends Message<MpdCommand_Utility_ListSongsInFolderResponse> {
  /**
   * @generated from field: repeated Song songs = 1;
   */
  songs: Song[] = [];

  constructor(data?: PartialMessage<MpdCommand_Utility_ListSongsInFolderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommand.Utility.ListSongsInFolderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "songs", kind: "message", T: Song, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommand_Utility_ListSongsInFolderResponse {
    return new MpdCommand_Utility_ListSongsInFolderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommand_Utility_ListSongsInFolderResponse {
    return new MpdCommand_Utility_ListSongsInFolderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommand_Utility_ListSongsInFolderResponse {
    return new MpdCommand_Utility_ListSongsInFolderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommand_Utility_ListSongsInFolderResponse | PlainMessage<MpdCommand_Utility_ListSongsInFolderResponse> | undefined, b: MpdCommand_Utility_ListSongsInFolderResponse | PlainMessage<MpdCommand_Utility_ListSongsInFolderResponse> | undefined): boolean {
    return proto3.util.equals(MpdCommand_Utility_ListSongsInFolderResponse, a, b);
  }
}

/**
 * @generated from message MpdRequest
 */
export class MpdRequest extends Message<MpdRequest> {
  /**
   * @generated from field: MpdProfile profile = 1;
   */
  profile?: MpdProfile;

  /**
   * @generated from oneof MpdRequest.command
   */
  command: {
    /**
     * @generated from field: MpdCommand.Connection.PingRequest ping = 2;
     */
    value: MpdCommand_Connection_PingRequest;
    case: "ping";
  } | {
    /**
     * @generated from field: MpdCommand.Control.NextRequest next = 3;
     */
    value: MpdCommand_Control_NextRequest;
    case: "next";
  } | {
    /**
     * @generated from field: MpdCommand.Control.PauseRequest pause = 4;
     */
    value: MpdCommand_Control_PauseRequest;
    case: "pause";
  } | {
    /**
     * @generated from field: MpdCommand.Control.PlayRequest play = 5;
     */
    value: MpdCommand_Control_PlayRequest;
    case: "play";
  } | {
    /**
     * @generated from field: MpdCommand.Control.PreviousRequest previous = 6;
     */
    value: MpdCommand_Control_PreviousRequest;
    case: "previous";
  } | {
    /**
     * @generated from field: MpdCommand.Control.SeekRequest seek = 7;
     */
    value: MpdCommand_Control_SeekRequest;
    case: "seek";
  } | {
    /**
     * @generated from field: MpdCommand.Control.StopRequest stop = 8;
     */
    value: MpdCommand_Control_StopRequest;
    case: "stop";
  } | {
    /**
     * @generated from field: MpdCommand.Playback.ConsumeRequest consume = 9;
     */
    value: MpdCommand_Playback_ConsumeRequest;
    case: "consume";
  } | {
    /**
     * @generated from field: MpdCommand.Playback.RandomRequest random = 10;
     */
    value: MpdCommand_Playback_RandomRequest;
    case: "random";
  } | {
    /**
     * @generated from field: MpdCommand.Playback.RepeatRequest repeat = 11;
     */
    value: MpdCommand_Playback_RepeatRequest;
    case: "repeat";
  } | {
    /**
     * @generated from field: MpdCommand.Playback.SetVolRequest setvol = 12;
     */
    value: MpdCommand_Playback_SetVolRequest;
    case: "setvol";
  } | {
    /**
     * @generated from field: MpdCommand.Playback.GetVolRequest getvol = 13;
     */
    value: MpdCommand_Playback_GetVolRequest;
    case: "getvol";
  } | {
    /**
     * @generated from field: MpdCommand.Playback.SingleRequest single = 14;
     */
    value: MpdCommand_Playback_SingleRequest;
    case: "single";
  } | {
    /**
     * @generated from field: MpdCommand.Status.CurrentSongRequest currentsong = 15;
     */
    value: MpdCommand_Status_CurrentSongRequest;
    case: "currentsong";
  } | {
    /**
     * @generated from field: MpdCommand.Status.StatusRequest status = 16;
     */
    value: MpdCommand_Status_StatusRequest;
    case: "status";
  } | {
    /**
     * @generated from field: MpdCommand.Status.StatsRequest stats = 17;
     */
    value: MpdCommand_Status_StatsRequest;
    case: "stats";
  } | {
    /**
     * @generated from field: MpdCommand.Queue.AddRequest add = 18;
     */
    value: MpdCommand_Queue_AddRequest;
    case: "add";
  } | {
    /**
     * @generated from field: MpdCommand.Queue.ClearRequest clear = 19;
     */
    value: MpdCommand_Queue_ClearRequest;
    case: "clear";
  } | {
    /**
     * @generated from field: MpdCommand.Queue.DeleteRequest delete = 20;
     */
    value: MpdCommand_Queue_DeleteRequest;
    case: "delete";
  } | {
    /**
     * @generated from field: MpdCommand.Queue.MoveRequest move = 21;
     */
    value: MpdCommand_Queue_MoveRequest;
    case: "move";
  } | {
    /**
     * @generated from field: MpdCommand.Queue.PlaylistInfoRequest playlistinfo = 22;
     */
    value: MpdCommand_Queue_PlaylistInfoRequest;
    case: "playlistinfo";
  } | {
    /**
     * @generated from field: MpdCommand.Queue.ShuffleRequest shuffle = 23;
     */
    value: MpdCommand_Queue_ShuffleRequest;
    case: "shuffle";
  } | {
    /**
     * @generated from field: MpdCommand.StoredPlaylist.ListPlaylistInfoRequest listplaylistinfo = 24;
     */
    value: MpdCommand_StoredPlaylist_ListPlaylistInfoRequest;
    case: "listplaylistinfo";
  } | {
    /**
     * @generated from field: MpdCommand.StoredPlaylist.ListPlaylistsRequest listplaylists = 25;
     */
    value: MpdCommand_StoredPlaylist_ListPlaylistsRequest;
    case: "listplaylists";
  } | {
    /**
     * @generated from field: MpdCommand.StoredPlaylist.PlaylistAddRequest playlistadd = 26;
     */
    value: MpdCommand_StoredPlaylist_PlaylistAddRequest;
    case: "playlistadd";
  } | {
    /**
     * @generated from field: MpdCommand.StoredPlaylist.PlaylistClearRequest playlistclear = 27;
     */
    value: MpdCommand_StoredPlaylist_PlaylistClearRequest;
    case: "playlistclear";
  } | {
    /**
     * @generated from field: MpdCommand.StoredPlaylist.PlaylistDeleteRequest playlistdelete = 28;
     */
    value: MpdCommand_StoredPlaylist_PlaylistDeleteRequest;
    case: "playlistdelete";
  } | {
    /**
     * @generated from field: MpdCommand.StoredPlaylist.PlaylistMoveRequest playlistmove = 29;
     */
    value: MpdCommand_StoredPlaylist_PlaylistMoveRequest;
    case: "playlistmove";
  } | {
    /**
     * @generated from field: MpdCommand.StoredPlaylist.RenameRequest rename = 30;
     */
    value: MpdCommand_StoredPlaylist_RenameRequest;
    case: "rename";
  } | {
    /**
     * @generated from field: MpdCommand.StoredPlaylist.RemoveRequest rm = 31;
     */
    value: MpdCommand_StoredPlaylist_RemoveRequest;
    case: "rm";
  } | {
    /**
     * @generated from field: MpdCommand.StoredPlaylist.SaveRequest save = 32;
     */
    value: MpdCommand_StoredPlaylist_SaveRequest;
    case: "save";
  } | {
    /**
     * @generated from field: MpdCommand.Database.ListRequest list = 33;
     */
    value: MpdCommand_Database_ListRequest;
    case: "list";
  } | {
    /**
     * @generated from field: MpdCommand.Database.SearchRequest search = 34;
     */
    value: MpdCommand_Database_SearchRequest;
    case: "search";
  } | {
    /**
     * @generated from field: MpdCommand.Database.UpdateRequest update = 35;
     */
    value: MpdCommand_Database_UpdateRequest;
    case: "update";
  } | {
    /**
     * @generated from field: MpdCommand.Audio.OutputsRequest outputs = 36;
     */
    value: MpdCommand_Audio_OutputsRequest;
    case: "outputs";
  } | {
    /**
     * @generated from field: MpdCommand.Utility.ListAllSongsRequest list_all_songs = 37;
     */
    value: MpdCommand_Utility_ListAllSongsRequest;
    case: "listAllSongs";
  } | {
    /**
     * @generated from field: MpdCommand.Utility.ListAllFoldersRequest list_all_folders = 38;
     */
    value: MpdCommand_Utility_ListAllFoldersRequest;
    case: "listAllFolders";
  } | {
    /**
     * @generated from field: MpdCommand.Utility.ListSongsInFolderRequest list_songs_in_folder = 39;
     */
    value: MpdCommand_Utility_ListSongsInFolderRequest;
    case: "listSongsInFolder";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MpdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile", kind: "message", T: MpdProfile },
    { no: 2, name: "ping", kind: "message", T: MpdCommand_Connection_PingRequest, oneof: "command" },
    { no: 3, name: "next", kind: "message", T: MpdCommand_Control_NextRequest, oneof: "command" },
    { no: 4, name: "pause", kind: "message", T: MpdCommand_Control_PauseRequest, oneof: "command" },
    { no: 5, name: "play", kind: "message", T: MpdCommand_Control_PlayRequest, oneof: "command" },
    { no: 6, name: "previous", kind: "message", T: MpdCommand_Control_PreviousRequest, oneof: "command" },
    { no: 7, name: "seek", kind: "message", T: MpdCommand_Control_SeekRequest, oneof: "command" },
    { no: 8, name: "stop", kind: "message", T: MpdCommand_Control_StopRequest, oneof: "command" },
    { no: 9, name: "consume", kind: "message", T: MpdCommand_Playback_ConsumeRequest, oneof: "command" },
    { no: 10, name: "random", kind: "message", T: MpdCommand_Playback_RandomRequest, oneof: "command" },
    { no: 11, name: "repeat", kind: "message", T: MpdCommand_Playback_RepeatRequest, oneof: "command" },
    { no: 12, name: "setvol", kind: "message", T: MpdCommand_Playback_SetVolRequest, oneof: "command" },
    { no: 13, name: "getvol", kind: "message", T: MpdCommand_Playback_GetVolRequest, oneof: "command" },
    { no: 14, name: "single", kind: "message", T: MpdCommand_Playback_SingleRequest, oneof: "command" },
    { no: 15, name: "currentsong", kind: "message", T: MpdCommand_Status_CurrentSongRequest, oneof: "command" },
    { no: 16, name: "status", kind: "message", T: MpdCommand_Status_StatusRequest, oneof: "command" },
    { no: 17, name: "stats", kind: "message", T: MpdCommand_Status_StatsRequest, oneof: "command" },
    { no: 18, name: "add", kind: "message", T: MpdCommand_Queue_AddRequest, oneof: "command" },
    { no: 19, name: "clear", kind: "message", T: MpdCommand_Queue_ClearRequest, oneof: "command" },
    { no: 20, name: "delete", kind: "message", T: MpdCommand_Queue_DeleteRequest, oneof: "command" },
    { no: 21, name: "move", kind: "message", T: MpdCommand_Queue_MoveRequest, oneof: "command" },
    { no: 22, name: "playlistinfo", kind: "message", T: MpdCommand_Queue_PlaylistInfoRequest, oneof: "command" },
    { no: 23, name: "shuffle", kind: "message", T: MpdCommand_Queue_ShuffleRequest, oneof: "command" },
    { no: 24, name: "listplaylistinfo", kind: "message", T: MpdCommand_StoredPlaylist_ListPlaylistInfoRequest, oneof: "command" },
    { no: 25, name: "listplaylists", kind: "message", T: MpdCommand_StoredPlaylist_ListPlaylistsRequest, oneof: "command" },
    { no: 26, name: "playlistadd", kind: "message", T: MpdCommand_StoredPlaylist_PlaylistAddRequest, oneof: "command" },
    { no: 27, name: "playlistclear", kind: "message", T: MpdCommand_StoredPlaylist_PlaylistClearRequest, oneof: "command" },
    { no: 28, name: "playlistdelete", kind: "message", T: MpdCommand_StoredPlaylist_PlaylistDeleteRequest, oneof: "command" },
    { no: 29, name: "playlistmove", kind: "message", T: MpdCommand_StoredPlaylist_PlaylistMoveRequest, oneof: "command" },
    { no: 30, name: "rename", kind: "message", T: MpdCommand_StoredPlaylist_RenameRequest, oneof: "command" },
    { no: 31, name: "rm", kind: "message", T: MpdCommand_StoredPlaylist_RemoveRequest, oneof: "command" },
    { no: 32, name: "save", kind: "message", T: MpdCommand_StoredPlaylist_SaveRequest, oneof: "command" },
    { no: 33, name: "list", kind: "message", T: MpdCommand_Database_ListRequest, oneof: "command" },
    { no: 34, name: "search", kind: "message", T: MpdCommand_Database_SearchRequest, oneof: "command" },
    { no: 35, name: "update", kind: "message", T: MpdCommand_Database_UpdateRequest, oneof: "command" },
    { no: 36, name: "outputs", kind: "message", T: MpdCommand_Audio_OutputsRequest, oneof: "command" },
    { no: 37, name: "list_all_songs", kind: "message", T: MpdCommand_Utility_ListAllSongsRequest, oneof: "command" },
    { no: 38, name: "list_all_folders", kind: "message", T: MpdCommand_Utility_ListAllFoldersRequest, oneof: "command" },
    { no: 39, name: "list_songs_in_folder", kind: "message", T: MpdCommand_Utility_ListSongsInFolderRequest, oneof: "command" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdRequest {
    return new MpdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdRequest {
    return new MpdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdRequest {
    return new MpdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MpdRequest | PlainMessage<MpdRequest> | undefined, b: MpdRequest | PlainMessage<MpdRequest> | undefined): boolean {
    return proto3.util.equals(MpdRequest, a, b);
  }
}

/**
 * @generated from message MpdRequestBulk
 */
export class MpdRequestBulk extends Message<MpdRequestBulk> {
  /**
   * @generated from field: repeated MpdRequest requests = 1;
   */
  requests: MpdRequest[] = [];

  constructor(data?: PartialMessage<MpdRequestBulk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdRequestBulk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requests", kind: "message", T: MpdRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdRequestBulk {
    return new MpdRequestBulk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdRequestBulk {
    return new MpdRequestBulk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdRequestBulk {
    return new MpdRequestBulk().fromJsonString(jsonString, options);
  }

  static equals(a: MpdRequestBulk | PlainMessage<MpdRequestBulk> | undefined, b: MpdRequestBulk | PlainMessage<MpdRequestBulk> | undefined): boolean {
    return proto3.util.equals(MpdRequestBulk, a, b);
  }
}

/**
 * @generated from message MpdCommandError
 */
export class MpdCommandError extends Message<MpdCommandError> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<MpdCommandError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdCommandError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdCommandError {
    return new MpdCommandError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdCommandError {
    return new MpdCommandError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdCommandError {
    return new MpdCommandError().fromJsonString(jsonString, options);
  }

  static equals(a: MpdCommandError | PlainMessage<MpdCommandError> | undefined, b: MpdCommandError | PlainMessage<MpdCommandError> | undefined): boolean {
    return proto3.util.equals(MpdCommandError, a, b);
  }
}

/**
 * @generated from message MpdResponse
 */
export class MpdResponse extends Message<MpdResponse> {
  /**
   * @generated from oneof MpdResponse.command
   */
  command: {
    /**
     * @generated from field: MpdCommand.Connection.PingResponse ping = 2;
     */
    value: MpdCommand_Connection_PingResponse;
    case: "ping";
  } | {
    /**
     * @generated from field: MpdCommand.Control.NextResponse next = 3;
     */
    value: MpdCommand_Control_NextResponse;
    case: "next";
  } | {
    /**
     * @generated from field: MpdCommand.Control.PauseResponse pause = 4;
     */
    value: MpdCommand_Control_PauseResponse;
    case: "pause";
  } | {
    /**
     * @generated from field: MpdCommand.Control.PlayResponse play = 5;
     */
    value: MpdCommand_Control_PlayResponse;
    case: "play";
  } | {
    /**
     * @generated from field: MpdCommand.Control.PreviousResponse previous = 6;
     */
    value: MpdCommand_Control_PreviousResponse;
    case: "previous";
  } | {
    /**
     * @generated from field: MpdCommand.Control.SeekResponse seek = 7;
     */
    value: MpdCommand_Control_SeekResponse;
    case: "seek";
  } | {
    /**
     * @generated from field: MpdCommand.Control.StopResponse stop = 8;
     */
    value: MpdCommand_Control_StopResponse;
    case: "stop";
  } | {
    /**
     * @generated from field: MpdCommand.Playback.ConsumeResponse consume = 9;
     */
    value: MpdCommand_Playback_ConsumeResponse;
    case: "consume";
  } | {
    /**
     * @generated from field: MpdCommand.Playback.RandomResponse random = 10;
     */
    value: MpdCommand_Playback_RandomResponse;
    case: "random";
  } | {
    /**
     * @generated from field: MpdCommand.Playback.RepeatResponse repeat = 11;
     */
    value: MpdCommand_Playback_RepeatResponse;
    case: "repeat";
  } | {
    /**
     * @generated from field: MpdCommand.Playback.SetVolResponse setvol = 12;
     */
    value: MpdCommand_Playback_SetVolResponse;
    case: "setvol";
  } | {
    /**
     * @generated from field: MpdCommand.Playback.GetVolResponse getvol = 13;
     */
    value: MpdCommand_Playback_GetVolResponse;
    case: "getvol";
  } | {
    /**
     * @generated from field: MpdCommand.Playback.SingleResponse single = 14;
     */
    value: MpdCommand_Playback_SingleResponse;
    case: "single";
  } | {
    /**
     * @generated from field: MpdCommand.Status.CurrentSongResponse currentsong = 15;
     */
    value: MpdCommand_Status_CurrentSongResponse;
    case: "currentsong";
  } | {
    /**
     * @generated from field: MpdCommand.Status.StatusResponse status = 16;
     */
    value: MpdCommand_Status_StatusResponse;
    case: "status";
  } | {
    /**
     * @generated from field: MpdCommand.Status.StatsResponse stats = 17;
     */
    value: MpdCommand_Status_StatsResponse;
    case: "stats";
  } | {
    /**
     * @generated from field: MpdCommand.Queue.AddResponse add = 18;
     */
    value: MpdCommand_Queue_AddResponse;
    case: "add";
  } | {
    /**
     * @generated from field: MpdCommand.Queue.ClearResponse clear = 19;
     */
    value: MpdCommand_Queue_ClearResponse;
    case: "clear";
  } | {
    /**
     * @generated from field: MpdCommand.Queue.DeleteResponse delete = 20;
     */
    value: MpdCommand_Queue_DeleteResponse;
    case: "delete";
  } | {
    /**
     * @generated from field: MpdCommand.Queue.MoveResponse move = 21;
     */
    value: MpdCommand_Queue_MoveResponse;
    case: "move";
  } | {
    /**
     * @generated from field: MpdCommand.Queue.PlaylistInfoResponse playlistinfo = 22;
     */
    value: MpdCommand_Queue_PlaylistInfoResponse;
    case: "playlistinfo";
  } | {
    /**
     * @generated from field: MpdCommand.Queue.ShuffleResponse shuffle = 23;
     */
    value: MpdCommand_Queue_ShuffleResponse;
    case: "shuffle";
  } | {
    /**
     * @generated from field: MpdCommand.StoredPlaylist.ListPlaylistInfoResponse listplaylistinfo = 24;
     */
    value: MpdCommand_StoredPlaylist_ListPlaylistInfoResponse;
    case: "listplaylistinfo";
  } | {
    /**
     * @generated from field: MpdCommand.StoredPlaylist.ListPlaylistsResponse listplaylists = 25;
     */
    value: MpdCommand_StoredPlaylist_ListPlaylistsResponse;
    case: "listplaylists";
  } | {
    /**
     * @generated from field: MpdCommand.StoredPlaylist.PlaylistAddResponse playlistadd = 26;
     */
    value: MpdCommand_StoredPlaylist_PlaylistAddResponse;
    case: "playlistadd";
  } | {
    /**
     * @generated from field: MpdCommand.StoredPlaylist.PlaylistClearResponse playlistclear = 27;
     */
    value: MpdCommand_StoredPlaylist_PlaylistClearResponse;
    case: "playlistclear";
  } | {
    /**
     * @generated from field: MpdCommand.StoredPlaylist.PlaylistDeleteResponse playlistdelete = 28;
     */
    value: MpdCommand_StoredPlaylist_PlaylistDeleteResponse;
    case: "playlistdelete";
  } | {
    /**
     * @generated from field: MpdCommand.StoredPlaylist.PlaylistMoveResponse playlistmove = 29;
     */
    value: MpdCommand_StoredPlaylist_PlaylistMoveResponse;
    case: "playlistmove";
  } | {
    /**
     * @generated from field: MpdCommand.StoredPlaylist.RenameResponse rename = 30;
     */
    value: MpdCommand_StoredPlaylist_RenameResponse;
    case: "rename";
  } | {
    /**
     * @generated from field: MpdCommand.StoredPlaylist.RemoveResponse rm = 31;
     */
    value: MpdCommand_StoredPlaylist_RemoveResponse;
    case: "rm";
  } | {
    /**
     * @generated from field: MpdCommand.StoredPlaylist.SaveResponse save = 32;
     */
    value: MpdCommand_StoredPlaylist_SaveResponse;
    case: "save";
  } | {
    /**
     * @generated from field: MpdCommand.Database.ListResponse list = 33;
     */
    value: MpdCommand_Database_ListResponse;
    case: "list";
  } | {
    /**
     * @generated from field: MpdCommand.Database.SearchResponse search = 34;
     */
    value: MpdCommand_Database_SearchResponse;
    case: "search";
  } | {
    /**
     * @generated from field: MpdCommand.Database.UpdateResponse update = 35;
     */
    value: MpdCommand_Database_UpdateResponse;
    case: "update";
  } | {
    /**
     * @generated from field: MpdCommand.Audio.OutputsResponse outputs = 36;
     */
    value: MpdCommand_Audio_OutputsResponse;
    case: "outputs";
  } | {
    /**
     * @generated from field: MpdCommand.Utility.ListAllSongsResponse list_all_songs = 37;
     */
    value: MpdCommand_Utility_ListAllSongsResponse;
    case: "listAllSongs";
  } | {
    /**
     * @generated from field: MpdCommand.Utility.ListAllFoldersResponse list_all_folders = 38;
     */
    value: MpdCommand_Utility_ListAllFoldersResponse;
    case: "listAllFolders";
  } | {
    /**
     * @generated from field: MpdCommand.Utility.ListSongsInFolderResponse list_songs_in_folder = 39;
     */
    value: MpdCommand_Utility_ListSongsInFolderResponse;
    case: "listSongsInFolder";
  } | {
    /**
     * @generated from field: MpdCommandError error = 40;
     */
    value: MpdCommandError;
    case: "error";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MpdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "MpdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "ping", kind: "message", T: MpdCommand_Connection_PingResponse, oneof: "command" },
    { no: 3, name: "next", kind: "message", T: MpdCommand_Control_NextResponse, oneof: "command" },
    { no: 4, name: "pause", kind: "message", T: MpdCommand_Control_PauseResponse, oneof: "command" },
    { no: 5, name: "play", kind: "message", T: MpdCommand_Control_PlayResponse, oneof: "command" },
    { no: 6, name: "previous", kind: "message", T: MpdCommand_Control_PreviousResponse, oneof: "command" },
    { no: 7, name: "seek", kind: "message", T: MpdCommand_Control_SeekResponse, oneof: "command" },
    { no: 8, name: "stop", kind: "message", T: MpdCommand_Control_StopResponse, oneof: "command" },
    { no: 9, name: "consume", kind: "message", T: MpdCommand_Playback_ConsumeResponse, oneof: "command" },
    { no: 10, name: "random", kind: "message", T: MpdCommand_Playback_RandomResponse, oneof: "command" },
    { no: 11, name: "repeat", kind: "message", T: MpdCommand_Playback_RepeatResponse, oneof: "command" },
    { no: 12, name: "setvol", kind: "message", T: MpdCommand_Playback_SetVolResponse, oneof: "command" },
    { no: 13, name: "getvol", kind: "message", T: MpdCommand_Playback_GetVolResponse, oneof: "command" },
    { no: 14, name: "single", kind: "message", T: MpdCommand_Playback_SingleResponse, oneof: "command" },
    { no: 15, name: "currentsong", kind: "message", T: MpdCommand_Status_CurrentSongResponse, oneof: "command" },
    { no: 16, name: "status", kind: "message", T: MpdCommand_Status_StatusResponse, oneof: "command" },
    { no: 17, name: "stats", kind: "message", T: MpdCommand_Status_StatsResponse, oneof: "command" },
    { no: 18, name: "add", kind: "message", T: MpdCommand_Queue_AddResponse, oneof: "command" },
    { no: 19, name: "clear", kind: "message", T: MpdCommand_Queue_ClearResponse, oneof: "command" },
    { no: 20, name: "delete", kind: "message", T: MpdCommand_Queue_DeleteResponse, oneof: "command" },
    { no: 21, name: "move", kind: "message", T: MpdCommand_Queue_MoveResponse, oneof: "command" },
    { no: 22, name: "playlistinfo", kind: "message", T: MpdCommand_Queue_PlaylistInfoResponse, oneof: "command" },
    { no: 23, name: "shuffle", kind: "message", T: MpdCommand_Queue_ShuffleResponse, oneof: "command" },
    { no: 24, name: "listplaylistinfo", kind: "message", T: MpdCommand_StoredPlaylist_ListPlaylistInfoResponse, oneof: "command" },
    { no: 25, name: "listplaylists", kind: "message", T: MpdCommand_StoredPlaylist_ListPlaylistsResponse, oneof: "command" },
    { no: 26, name: "playlistadd", kind: "message", T: MpdCommand_StoredPlaylist_PlaylistAddResponse, oneof: "command" },
    { no: 27, name: "playlistclear", kind: "message", T: MpdCommand_StoredPlaylist_PlaylistClearResponse, oneof: "command" },
    { no: 28, name: "playlistdelete", kind: "message", T: MpdCommand_StoredPlaylist_PlaylistDeleteResponse, oneof: "command" },
    { no: 29, name: "playlistmove", kind: "message", T: MpdCommand_StoredPlaylist_PlaylistMoveResponse, oneof: "command" },
    { no: 30, name: "rename", kind: "message", T: MpdCommand_StoredPlaylist_RenameResponse, oneof: "command" },
    { no: 31, name: "rm", kind: "message", T: MpdCommand_StoredPlaylist_RemoveResponse, oneof: "command" },
    { no: 32, name: "save", kind: "message", T: MpdCommand_StoredPlaylist_SaveResponse, oneof: "command" },
    { no: 33, name: "list", kind: "message", T: MpdCommand_Database_ListResponse, oneof: "command" },
    { no: 34, name: "search", kind: "message", T: MpdCommand_Database_SearchResponse, oneof: "command" },
    { no: 35, name: "update", kind: "message", T: MpdCommand_Database_UpdateResponse, oneof: "command" },
    { no: 36, name: "outputs", kind: "message", T: MpdCommand_Audio_OutputsResponse, oneof: "command" },
    { no: 37, name: "list_all_songs", kind: "message", T: MpdCommand_Utility_ListAllSongsResponse, oneof: "command" },
    { no: 38, name: "list_all_folders", kind: "message", T: MpdCommand_Utility_ListAllFoldersResponse, oneof: "command" },
    { no: 39, name: "list_songs_in_folder", kind: "message", T: MpdCommand_Utility_ListSongsInFolderResponse, oneof: "command" },
    { no: 40, name: "error", kind: "message", T: MpdCommandError, oneof: "command" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MpdResponse {
    return new MpdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MpdResponse {
    return new MpdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MpdResponse {
    return new MpdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MpdResponse | PlainMessage<MpdResponse> | undefined, b: MpdResponse | PlainMessage<MpdResponse> | undefined): boolean {
    return proto3.util.equals(MpdResponse, a, b);
  }
}

