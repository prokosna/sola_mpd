// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file browser.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Song_MetadataTag, Song_MetadataValue } from "./song_pb.js";

/**
 * @generated from message BrowserFilter
 */
export class BrowserFilter extends Message<BrowserFilter> {
  /**
   * @generated from field: Song.MetadataTag tag = 1;
   */
  tag = Song_MetadataTag.UNKNOWN;

  /**
   * @generated from field: repeated Song.MetadataValue selected_values = 2;
   */
  selectedValues: Song_MetadataValue[] = [];

  /**
   * @generated from field: int32 order = 3;
   */
  order = 0;

  /**
   * @generated from field: int32 selected_order = 4;
   */
  selectedOrder = 0;

  constructor(data?: PartialMessage<BrowserFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BrowserFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tag", kind: "enum", T: proto3.getEnumType(Song_MetadataTag) },
    { no: 2, name: "selected_values", kind: "message", T: Song_MetadataValue, repeated: true },
    { no: 3, name: "order", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "selected_order", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BrowserFilter {
    return new BrowserFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BrowserFilter {
    return new BrowserFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BrowserFilter {
    return new BrowserFilter().fromJsonString(jsonString, options);
  }

  static equals(a: BrowserFilter | PlainMessage<BrowserFilter> | undefined, b: BrowserFilter | PlainMessage<BrowserFilter> | undefined): boolean {
    return proto3.util.equals(BrowserFilter, a, b);
  }
}

/**
 * @generated from message BrowserState
 */
export class BrowserState extends Message<BrowserState> {
  /**
   * @generated from field: repeated BrowserFilter filters = 1;
   */
  filters: BrowserFilter[] = [];

  constructor(data?: PartialMessage<BrowserState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "BrowserState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filters", kind: "message", T: BrowserFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BrowserState {
    return new BrowserState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BrowserState {
    return new BrowserState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BrowserState {
    return new BrowserState().fromJsonString(jsonString, options);
  }

  static equals(a: BrowserState | PlainMessage<BrowserState> | undefined, b: BrowserState | PlainMessage<BrowserState> | undefined): boolean {
    return proto3.util.equals(BrowserState, a, b);
  }
}

