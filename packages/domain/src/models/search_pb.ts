// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file search.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { FilterCondition } from "./filter_pb.js";
import { SongTableColumn } from "./song_table_pb.js";

/**
 * @generated from message Query
 */
export class Query extends Message<Query> {
  /**
   * @generated from field: repeated FilterCondition conditions = 1;
   */
  conditions: FilterCondition[] = [];

  constructor(data?: PartialMessage<Query>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Query";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "conditions", kind: "message", T: FilterCondition, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Query {
    return new Query().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Query {
    return new Query().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Query {
    return new Query().fromJsonString(jsonString, options);
  }

  static equals(a: Query | PlainMessage<Query> | undefined, b: Query | PlainMessage<Query> | undefined): boolean {
    return proto3.util.equals(Query, a, b);
  }
}

/**
 * @generated from message Search
 */
export class Search extends Message<Search> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated Query queries = 2;
   */
  queries: Query[] = [];

  /**
   * @generated from field: repeated SongTableColumn columns = 3;
   */
  columns: SongTableColumn[] = [];

  constructor(data?: PartialMessage<Search>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "Search";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "queries", kind: "message", T: Query, repeated: true },
    { no: 3, name: "columns", kind: "message", T: SongTableColumn, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Search {
    return new Search().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Search {
    return new Search().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Search {
    return new Search().fromJsonString(jsonString, options);
  }

  static equals(a: Search | PlainMessage<Search> | undefined, b: Search | PlainMessage<Search> | undefined): boolean {
    return proto3.util.equals(Search, a, b);
  }
}

/**
 * @generated from message SavedSearches
 */
export class SavedSearches extends Message<SavedSearches> {
  /**
   * @generated from field: repeated Search searches = 1;
   */
  searches: Search[] = [];

  constructor(data?: PartialMessage<SavedSearches>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "SavedSearches";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "searches", kind: "message", T: Search, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SavedSearches {
    return new SavedSearches().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SavedSearches {
    return new SavedSearches().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SavedSearches {
    return new SavedSearches().fromJsonString(jsonString, options);
  }

  static equals(a: SavedSearches | PlainMessage<SavedSearches> | undefined, b: SavedSearches | PlainMessage<SavedSearches> | undefined): boolean {
    return proto3.util.equals(SavedSearches, a, b);
  }
}

